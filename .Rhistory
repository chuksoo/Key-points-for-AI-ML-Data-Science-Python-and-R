plot(test$Gas_prod, pr.nn_, col='red', main='Real vs predicted NN', pch=18, cex=0.7)
points(test$Gas_prod, pr.lm, col='blue', pch=18, cex=0.7)
abline(0,1,lwd=2)
legend('bottomright', legend=c('NN','LM'), pch=18, col=c('red','blue'))
# Neural net fitting
set.seed(440)
mydata <- read.csv("Q4_data.csv", header=TRUE)
#Normalizing the dataset
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(mydata, normalize))
# Display head of data
head(mydata)
# Display tail of data
tail(mydata)
# Training and Test Data
trainset <- maxmindf[1:312, ]
testset <- maxmindf[313:446, ]
# Neural Network Training
library(neuralnet)
nn <- neuralnet(Gas_prod ~ Perf_Int + Frac_vol + Proppant + N.frac +
Tubing.depth + Casing.depth + FTP + Choke.Size + SITHP +
SG_gas + Well_Type + Latitude + Long. + Acid, data=trainset,
hidden=c(3,2), linear.output=TRUE, threshold=0.01)
nn$result.matrix
# Visual plot of the model
plot(nn)
#Test the resulting output
temp_test <- subset(testset, select = c("Gas_prod", "Perf_Int", "Frac_vol",
"Proppant", "N.frac", "Tubing.depth",
"Casing.depth",  "FTP", "Choke.Size",
"SITHP", "SG_gas", "Well_Type", "Latitude",
"Long.", "Acid"))
head(temp_test)
nn.results <- compute(nn, temp_test)
#Comparison of Predicted to Actual
results <- data.frame(actual = testset$Gas_prod, prediction = nn.results$net.result)
results
#Testing The Accuracy Of The Model
Gas_prod <- trainset$Gas_prod
predicted = results$prediction * abs(diff(range(Gas_prod))) + min(Gas_prod)
actual = results$actual * abs(diff(range(Gas_prod))) + min(Gas_prod)
comparison = data.frame(predicted, actual)
deviation = ((actual-predicted)/actual)
comparison = data.frame(predicted, actual, deviation)
accuracy = 1-abs(mean(deviation))
accuracy
nn <- neuralnet(Gas_prod ~ Perf_Int + Frac_vol + Proppant + N.frac + Tubing.depth
+ Casing.depth + FTP + Choke.Size + SITHP + SG_gas + Well_Type
+ Latitude + Long. + Acid,data=trainset, hidden=c(5,2),
linear.output=TRUE, threshold=0.01)
nn$result.matrix
plot(nn)
#Test the resulting output
temp_test <- subset(testset, select = c("Gas_prod", "Perf_Int", "Frac_vol",
"Proppant", "N.frac", "Tubing.depth",
"Casing.depth",  "FTP", "Choke.Size",
"SITHP", "SG_gas", "Well_Type", "Latitude",
"Long.", "Acid"))
head(temp_test)
nn.results <- compute(nn, temp_test)
results <- data.frame(actual = testset$Gas_prod, prediction = nn.results$net.result)
results
#Testing The Accuracy Of The Model
predicted = results$prediction * abs(diff(range(Gas_prod))) + min(Gas_prod)
actual = results$actual * abs(diff(range(Gas_prod))) + min(Gas_prod)
comparison = data.frame(predicted,actual)
deviation = ((actual-predicted)/actual)
comparison = data.frame(predicted,actual,deviation)
accuracy = 1-abs(mean(deviation))
accuracy
# load libraries
# Create vector of packages
project_packages <- c("knitr", "rmarkdown", "tidyverse", "data.table", "matrixStats", "fields", "plyr", "ggplot2", "nls2", "purrr", "nlstools", "nlme", "plotly", "ggthemes", "minpack.lm", "forecast", "tseries", "dplyr", "extrafont")
lapply(project_packages, require, character.only = TRUE)    # load multiple packages
set.seed(500)
prod_data <- read.csv("midlandbasinoil.csv")
install.packages("shiny")
install.packages("learnr")
test_variable <- 2 + 6
test_variable
test_variable <- 2 + 6
test_variable
# Create your variable here
temps_f <- c(-40, -35, -30, -20, 10, 5, 20)
# Create your variable here
temps_f <- c(-40, -35, -30, -20, 10, 5, 20)
# Create your variable here
temps_f <- c(-40, -35, -30, -20, 10, 5, 20)
return temperature_C
return(temperature_C)
# Write your function here
temp_converter <- function(temperature_F){
temperature_C = (temperature_F - 32) * 5 / 9
return(temperature_C)
}
# Apply your function to temp_f here
temps_C = lapply(temps_f, temp_converter)
temps_C
# Apply your function to temp_f here
temps_C = sapply(temps_f, temp_converter)
temps_C
# Apply your function to temp_f here
temps_C = round(sapply(temps_f, temp_converter))
temps_C
# Apply your function to temp_f here
temps_C = round(sapply(temps_f, temp_converter))
temps_C
print()
# Apply your function to temp_f here
temps_C = round(sapply(temps_f, temp_converter))
temps_C
print('')
temp_converter(0)
# Apply your function to temp_f here
#temps_C = round(sapply(temps_f, temp_converter))
#temps_C
temp_converter(0)
# Apply your function to temp_f here
temps_C = round(sapply(temps_f, temp_converter))
temps_C
# Apply your function to temp_f here
temps_C = round(sapply(temps_f, temp_converter), 2)
temps_C
# Write your function here
check_weather <- function(weather_condition){
# this loop check that weather is above a
# certain threshold by returning 'TRUE' or 'FALSE'
for (i in weather_condition){
if (i > 60){
day_above_60 = count(i)
if (day_above_60 > count(weather_condition)){
return('TRUE')
} else if (day_above_60 < count(weather_condition)) {
return('FALSE')
}
}
}
}
check_weather(temps_C)
# Write your function here
check_weather <- function(weather_condition){
# this loop check that weather is above a
# certain threshold by returning 'TRUE' or 'FALSE'
for (i in weather_condition){
if (i > 60){
day_above_60 = count(i)
if (day_above_60 > count(weather_condition)){
return('TRUE')
} else if (day_above_60 < count(weather_condition)) {
return('FALSE')
}
}
}
}
print(check_weather(temps_C))
# Write your function here
check_weather <- function(weather_condition){
# this loop check that weather is above a
# certain threshold by returning 'TRUE' or 'FALSE'
for (i in weather_condition){
if (i > 60){
day_above_60 = count(i)
if (day_above_60 > count(weather_condition)){
return('TRUE')
} else if (day_above_60 < count(weather_condition)) {
return('FALSE')
}
}
}
}
print(check_weather(temps_F))
test_variable <- 2 + 6
test_variable
# Create your variable here
temps_f <- c(-40, -35, -30, -20, 10, 5, 20)
# Create your variable here
temps_f <- c(-40, -35, -30, -20, 10, 5, 20)
# Write your function here
temp_converter <- function(temperature_f){
temperature_c = (temperature_f - 32) * 5 / 9
return(temperature_c)
}
# Apply your function to temp_f here
temps_c = round(sapply(temps_f, temp_converter), 2)
temps_c
# Write your function here
check_weather <- function(weather_condition){
# this loop check that weather is above a
# certain threshold by returning 'TRUE' or 'FALSE'
for (i in weather_condition){
if (i > 60){
day_above_60 = count(i)
if (day_above_60 > count(weather_condition)){
return('TRUE')
} else if (day_above_60 < count(weather_condition)) {
return('FALSE')
}
}
}
}
print(check_weather(temps_f))
# Write your function here
check_weather <- function(weather_condition){
# this loop check that weather is above a
# certain threshold by returning 'TRUE' or 'FALSE'
for (i in weather_condition){
if (i > 60){
day_above_60 = count(i)
if (day_above_60 > count(weather_condition)){
return('TRUE')
} else if (day_above_60 < count(weather_condition)) {
return('FALSE')
}
}
}
}
print(check_weather(temps_c))
# Write your function here
check_weather <- function(weather_condition){
# this loop check that weather is above a
# certain threshold by returning 'TRUE' or 'FALSE'
for (i in weather_condition){
if (i > 60){
day_above_60 = count(i)
if (day_above_60 > count(weather_condition)){
return('TRUE')
} else if (day_above_60 < count(weather_condition)) {
return('FALSE')
}
}
}
}
check_weather(temps_c)
# Write your function here
check_weather <- function(weather_condition){
# this loop check that weather is above a
# certain threshold by returning 'TRUE' or 'FALSE'
for (i in seq(weather_condition)){
if (i > 60){
day_above_60 = count(i)
if (day_above_60 > count(weather_condition)){
return('TRUE')
} else if (day_above_60 < count(weather_condition)) {
return('FALSE')
}
}
}
}
check_weather(temps_c)
# Create your variable here
temps_f <- c(-40, -35, -30, -20, 10, 5, 100)
# Write your function here
temp_converter <- function(temperature_f){
temperature_c = (temperature_f - 32) * 5 / 9
return(temperature_c)
}
# Apply your function to temp_f here
temps_c = round(sapply(temps_f, temp_converter), 2)
temps_c
# Write your function here
check_weather <- function(weather_condition){
# this loop check that weather is above a
# certain threshold by returning 'TRUE' or 'FALSE'
for (i in seq(weather_condition)){
if (i > 60){
day_above_60 = count(i)
if (day_above_60 > count(weather_condition)){
return('TRUE')
} else if (day_above_60 < count(weather_condition)) {
return('FALSE')
}
}
}
}
check_weather(temps_f)
# Write your function here
check_weather <- function(weather_condition){
# this loop check that weather is above a
# certain threshold by returning 'TRUE' or 'FALSE'
count <- 0
for (i in seq(weather_condition)){
if (i > 60){
count <- count + 1
day_above_60 = count
if (day_above_60 > length(weather_condition) / 2){
return('TRUE')
} else {
return('FALSE')
}
}
}
}
check_weather(temps_f)
# Create your variable here
temps_f <- c(-40, -35, -30, 120, 110, 65, 100)
# Write your function here
temp_converter <- function(temperature_f){
temperature_c = (temperature_f - 32) * 5 / 9
return(temperature_c)
}
# Apply your function to temp_f here
temps_c = round(sapply(temps_f, temp_converter), 2)
temps_c
# Write your function here
check_weather <- function(weather_condition){
# this loop check that weather is above a
# certain threshold by returning 'TRUE' or 'FALSE'
count <- 0
for (i in seq(weather_condition)){
if (i > 60){
count <- count + 1
day_above_60 = count
if (day_above_60 > length(weather_condition) / 2){
return('TRUE')
} else {
return('FALSE')
}
}
}
}
check_weather(temps_f)
is_nice_weather <- function(temps){
count <- 0
for(temp in temps){
if (temp > 60){
count <- count + 1
}
}
return(count > length(temps) / 2)
}
is_nice_weather(temps_f)
# Write your function here
check_weather <- function(weather_condition){
# this loop check that weather is above a
# certain threshold by returning 'TRUE' or 'FALSE'
count <- 0
for (i in weather_condition){
if (i > 60){
count <- count + 1
}
}
return (count > length(weather_condition) / 2)
}
check_weather(temps_f)
# Write your function here
is_nice_weather <- function(weather_condition){
# this loop check that weather is above a
# certain threshold by returning 'TRUE' or 'FALSE'
count <- 0
for (i in weather_condition){
if (i > 60){
count <- count + 1
}
}
return (count > length(weather_condition) / 2)
}
is_nice_weather(temps_f)
# Create your list here
possible_destination <- c(fairbanks = temps_f, portland = c(60, 59, 57, 52, 55, 64, 68), houston = c(80, 85, 82, 81, 88, 76, 77))
# Apply your function to your list
sapply(possible_destination, is_nice_weather)
# Apply your function to your list
lapply(possible_destination, is_nice_weather)
# Apply your function to your list
nice_cities <- lapply(possible_destination, is_nice_weather)
nice_cities
# Apply your function to your list
nice_cities <- lapply(possible_destinations, is_nice_weather)
test_variable <- 2 + 6
test_variable
# Create your variable here
temps_f <- c(78, 69, 67, 73, 72, 71, 71)
# Write your function here
fahrenheit_to_celsius <- function(temp){
return((temp - 32) * 5 / 9)
}
fahrenheit_to_celsius(32)
fahrenheit_to_celsius(0)
# Apply your function to temp_f here
temps_c <- sapply(temps_f, fahrenheit_to_celsius)
temps_c
# Write your function here
is_nice_weather <- function(temps){
count <- 0
for(temp in temps){
if (temp > 60){
count <- count + 1
}
}
return(count > length(temps) / 2)
}
is_nice_weather(temps_f)
# Create your list here
possible_destinations <- list(wellington = temp_f, moscow = c(34, 35, 35, 34, 35, 34, 35), cape_town = c(87, 82, 74, 72, 71, 69, 70))
# Create your list here
possible_destinations <- list(wellington = temps_f, moscow = c(34, 35, 35, 34, 35, 34, 35), cape_town = c(87, 82, 74, 72, 71, 69, 70))
possible_destinations
# Apply your function to your list
nice_cities <- list(lapply(possible_destination, is_nice_weather))
nice_cities
# Create your list here
possible_destination <- list(fairbanks = temps_f, portland = c(60, 59, 57, 52, 55, 64, 68), houston = c(80, 85, 82, 81, 88, 76, 77))
# Apply your function to your list
nice_cities <- lapply(possible_destination, is_nice_weather)
nice_cities
# Create your boxplot visualization.
library(ggplots)
# Create your boxplot visualization.
install.packages('ggplot2')
library(ggplots)
# Create your boxplot visualization.
install.packages('ggplot2')
library('ggplots')
# Create your boxplot visualization.
install.packages('ggplot2')
library('ggplot2')
?ggplot2
# Create your boxplot visualization.
install.packages('ggplot2')
library(ggplot2)
?ggplot2
install.packages("ggplot2")
# Create your boxplot visualization.
install.packages('ggplot2')
library(ggplot2)
destination_df = as.data.frame(possible_destination)
boxplot(destination_df)
# Create your boxplot visualization.
#install.packages('ggplot2')
library(ggplot2)
destination_df = as.data.frame(possible_destination)
boxplot(destination_df,
main = 'Plot of possible destination',
xlab = 'Destinations',
ylab = 'Temperature')
test_variable <- 2 + 6
test_variable
# Create your variable here
temps_f <- c(-40, -35, -30, 120, 110, 65, 100)
# Write your function here
temp_converter <- function(temperature_f){
temperature_c = (temperature_f - 32) * 5 / 9
return(temperature_c)
}
# Apply your function to temp_f here
temps_c = round(sapply(temps_f, temp_converter), 2)
temps_c
# Write your function here
is_nice_weather <- function(weather_condition){
# this loop check that weather is above a
# certain threshold by returning 'TRUE' or 'FALSE'
count <- 0
for (i in weather_condition){
if (i > 60){
count <- count + 1
}
}
return (count > length(weather_condition) / 2)
}
is_nice_weather(temps_f)
# Create your list here
possible_destination <- list(fairbanks = temps_f, portland = c(60, 59, 57, 52, 55, 64, 68), houston = c(80, 85, 82, 81, 88, 76, 77))
# Apply your function to your list
nice_cities <- lapply(possible_destination, is_nice_weather)
nice_cities
# Create your boxplot visualization.
#install.packages('ggplot2')
library(ggplot2)
destination_df = as.data.frame(possible_destination)
boxplot(destination_df,
main = 'Plot of possible destination',
xlab = 'Destinations',
ylab = 'Temperature')
knitr::opts_chunk$set(echo = TRUE)
my_string_vector <- c("this", "is", "an", "example", "vector")
my_string_vector[3] # returns "an"
my_boolean_vector <- c(TRUE, FALSE, FALSE)
my_numerical_vector <- c(0.4, 0.9, 1, 0.45, 1.2, 0.33)
# R will force the same type even if you input different types to c()
my_vector <- c("word", 45, 12, FALSE)
# result: a vector of strings "word" "45" "12" "FALSE"
my_list <- list("Elephant", FALSE, 900, 80.3, list("pencil", "pens"))
my_list[[4]] # returns 80.3
my_longer_list <- list(misc = my_list, notes = c("g", "b", "d", "g"))
my_longer_list[[1]]
# returns the contents of my_list
my_longer_list$misc
# returns the contents of my_list
my_longer_list$notes
# returns "g" "b" "d" "g"
# will create a 3-by-3 matrix with the vectors being filled column-wise (default)
my_matrix <- matrix(c("a", "b", "e", "k", "e", "w", "g", "x", "t"), nrow = 3, ncol = 3)
# result:
# "a" "k" "g"
# "b" "e" "x"
# "e" "w" "t"
single_element <- my_matrix[1, 3]
# returns "g"
second_row <- my_matrix[2,]
# returns: "b" "e" "x"
second_col <- my_matrix[,2]
# returns: "k" "e" "w"
getwd()
setwd(dir = Desktop/Cheat Sheet for AI, ML, Data Science, Python and R)
setwd(~Desktop/Cheat Sheet for AI, ML, Data Science, Python and R)
setwd("C:/Desktop/Cheat Sheet for AI, ML, Data Science, Python and R")
getwd()
getwd()
setwd("C:/Users/hotty/Desktop/Cheat Sheet for AI, ML, Data Science, Python and R")
getwd()
